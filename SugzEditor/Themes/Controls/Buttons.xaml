<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:controls="clr-namespace:SugzEditor.Controls" xmlns:sgzcontrols="clr-namespace:SugzTools.Controls;assembly=SugzTools" xmlns:sgzconv="clr-namespace:SugzTools.Converters;assembly=SugzTools">

	<sgzconv:InvertableBooleanToVisibilityConverter x:Key="BoolToVisibility" />

	<Style x:Key="BaseButtonStyle" TargetType="{x:Type ButtonBase}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="{x:Null}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Foreground" Value="{DynamicResource MainForeground}" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	
	<Storyboard x:Key="ToolbarButtonHoverEnterAnimation">
		<DoubleAnimation Storyboard.TargetName="hover" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.25" />
	</Storyboard>
	<Storyboard x:Key="ToolbarButtonHoverExitAnimation">
		<DoubleAnimation Storyboard.TargetName="hover" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:0.25" />
	</Storyboard>
	<Storyboard x:Key="ToolbarButtonPressedEnterAnimation">
		<DoubleAnimation Storyboard.TargetName="pressed" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.25" />
	</Storyboard>
	<Storyboard x:Key="ToolbarButtonPressedExitAnimation">
		<DoubleAnimation Storyboard.TargetName="pressed" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:0.25" />
	</Storyboard>
	
	
	<Style x:Key="ToolbarButtonStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource BaseButtonStyle}">
		<Setter Property="Width" Value="30" />
		<Setter Property="Height" Value="Auto" />
		<Setter Property="Margin" Value="0,0,2,0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Border Background="{TemplateBinding Background}" 
							BorderBrush="{TemplateBinding BorderBrush}" 
							BorderThickness="{TemplateBinding BorderThickness}" 
							Padding="{TemplateBinding Padding}">
						<Grid>
							<Rectangle x:Name="hover"
									   Fill="{DynamicResource ToolbarMouseHover}"
									   Opacity="0"
									   RadiusX="5"
									   RadiusY="5" />
							<Rectangle x:Name="pressed"
									   Fill="{DynamicResource ToolbarMouseDown}"
									   Opacity="0"
									   RadiusX="5"
									   RadiusY="5" />
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver"
										   Value="True" />
								<Condition Property="IsPressed"
										   Value="False" />
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource ToolbarButtonHoverEnterAnimation}" />
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource ToolbarButtonHoverExitAnimation}" />
							</MultiTrigger.ExitActions>
						</MultiTrigger>

						<Trigger Property="IsPressed"
								 Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource ToolbarButtonPressedEnterAnimation}" />
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource ToolbarButtonPressedExitAnimation}" />
							</Trigger.ExitActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<Style x:Key="ToolbarToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ToolbarButtonStyle}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Background="{TemplateBinding Background}">
						<Grid>
							<Rectangle x:Name="hover"
									   Fill="{DynamicResource ToolbarMouseHover}"
									   Opacity="0"
									   RadiusX="5"
									   RadiusY="5" />
							<Rectangle x:Name="pressed"
									   Fill="{DynamicResource ToolbarMouseDown}"
									   Opacity="0"
									   RadiusX="5"
									   RadiusY="5" />
							<Rectangle x:Name="checkMark"
									   Fill="{DynamicResource ToolbarMouseDown}"
									   Height="1"
									   Margin="4,2"
									   Visibility="Collapsed"
									   VerticalAlignment="Bottom" />
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
											  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
											  Margin="{TemplateBinding Padding}" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True" />
								<Condition Property="IsPressed" Value="False" />
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource ToolbarButtonHoverEnterAnimation}" />
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource ToolbarButtonHoverExitAnimation}" />
							</MultiTrigger.ExitActions>
						</MultiTrigger>

						<Trigger Property="IsPressed" Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource ToolbarButtonPressedEnterAnimation}" />
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource ToolbarButtonPressedExitAnimation}" />
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="checkMark" Property="Visibility" Value="Visible" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<Style x:Key="SystemButtonStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource BaseButtonStyle}">
		<Setter Property="Width" Value="30" />
		<Setter Property="Height" Value="Auto" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Stretch" />
		<Setter Property="DockPanel.Dock" Value="Right" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource ToolbarMouseHover}" />
			</Trigger>
		</Style.Triggers>
	</Style>


	<Style x:Key="WindowIconButtonStyle" TargetType="{x:Type ButtonBase}">
		<Setter Property="Width" Value="20" />
		<Setter Property="Height" Value="20" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="{x:Null}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Margin" Value="5,5,0,5" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Border Background="{TemplateBinding Background}">
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<Style x:Key="ExplorerCheckButtonStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="Height" Value="22" />
		<Setter Property="Background" Value="{DynamicResource ExplorerCategories}" />
		<Setter Property="Foreground" Value="{DynamicResource MainForeground}" />
		<Setter Property="FontFamily" Value="Segoe UI Semibold" />
		<Setter Property="DockPanel.Dock" Value="Top" />
		<Setter Property="HorizontalAlignment" Value="Stretch" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<DockPanel Background="{TemplateBinding Background}">
						<Path x:Name="PART_Arrow" DockPanel.Dock="Left" Data="M0,0 L4,3 0,6 Z" Fill="{TemplateBinding Foreground}" VerticalAlignment="Center" Margin="7,0,0,0" Width="6" />

						<ContentPresenter x:Name="PART_Content" DockPanel.Dock="Left" HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="8,0,0,0" TextOptions.TextFormattingMode="Display" />
					</DockPanel>

					<ControlTemplate.Triggers>
						<!-- Expand State -->
						<Trigger Property="IsChecked" Value="true">
							<Setter TargetName="PART_Arrow" Property="Data" Value="M0,0 L6,0 3,4 Z" />
						</Trigger>

					</ControlTemplate.Triggers>

				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<Style x:Key="SwitchButtonStyle" TargetType="{x:Type sgzcontrols:SgzCheckBox}">
		<Setter Property="IsSwitch" Value="True" />
		<Setter Property="Background" Value="{DynamicResource MainBackground}" />
		<Setter Property="BorderBrush" Value="{DynamicResource MainBorderBrush}" />
		<Setter Property="CheckedBrush" Value="{DynamicResource ToolbarMouseDown}" />
		<Setter Property="IndeterminateBrush" Value="{DynamicResource MainBorderBrush}" />
		<Setter Property="DockPanel.Dock" Value="Right" />
		<Setter Property="Height" Value="12" />
	</Style>


	<Storyboard x:Key="RoundedIconButtonMouseOverEnterAnimation">
		<DoubleAnimation Storyboard.TargetName="hover" Storyboard.TargetProperty="Opacity" To="0.1" Duration="0:0:0.2" />

		<DoubleAnimationUsingKeyFrames Storyboard.TargetName="path" Storyboard.TargetProperty="RenderTransform.ScaleX">
			<EasingDoubleKeyFrame KeyTime="0:0:0" Value="0.35" />
			<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0.5">
				<EasingDoubleKeyFrame.EasingFunction>
					<SineEase EasingMode="EaseInOut" />
				</EasingDoubleKeyFrame.EasingFunction>
			</EasingDoubleKeyFrame>
		</DoubleAnimationUsingKeyFrames>

		<DoubleAnimationUsingKeyFrames Storyboard.TargetName="path" Storyboard.TargetProperty="RenderTransform.ScaleY">
			<EasingDoubleKeyFrame KeyTime="0:0:0" Value="0.35" />
			<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0.5">
				<EasingDoubleKeyFrame.EasingFunction>
					<SineEase EasingMode="EaseInOut" />
				</EasingDoubleKeyFrame.EasingFunction>
			</EasingDoubleKeyFrame>
		</DoubleAnimationUsingKeyFrames>

	</Storyboard>
	<Storyboard x:Key="RoundedIconButtonMouseOverExitAnimation">
		<DoubleAnimation Storyboard.TargetName="hover" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.2" />

		<DoubleAnimationUsingKeyFrames Storyboard.TargetName="path" Storyboard.TargetProperty="RenderTransform.ScaleX">
			<EasingDoubleKeyFrame KeyTime="0:0:0" Value="0.5" />
			<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0.35">
				<EasingDoubleKeyFrame.EasingFunction>
					<SineEase EasingMode="EaseInOut" />
				</EasingDoubleKeyFrame.EasingFunction>
			</EasingDoubleKeyFrame>
		</DoubleAnimationUsingKeyFrames>

		<DoubleAnimationUsingKeyFrames Storyboard.TargetName="path" Storyboard.TargetProperty="RenderTransform.ScaleY">
			<EasingDoubleKeyFrame KeyTime="0:0:0" Value="0.5" />
			<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0.35">
				<EasingDoubleKeyFrame.EasingFunction>
					<SineEase EasingMode="EaseInOut" />
				</EasingDoubleKeyFrame.EasingFunction>
			</EasingDoubleKeyFrame>
		</DoubleAnimationUsingKeyFrames>

	</Storyboard>
	<Style x:Key="RoundedIconButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseButtonStyle}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Grid Background="{TemplateBinding Background}">
						<Ellipse x:Name="hover" Fill="{DynamicResource MainMax}" Opacity="0" />
						<Path x:Name="path" Fill="{TemplateBinding Foreground}" Data="{Binding Path=(controls:ButtonHelper.Data), RelativeSource={RelativeSource TemplatedParent}}" RenderTransformOrigin="0.5, 0.5" Stretch="Uniform">
							<Path.RenderTransform>
								<ScaleTransform ScaleX="0.35" ScaleY="0.35" />
							</Path.RenderTransform>
						</Path>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource RoundedIconButtonMouseOverEnterAnimation}" />
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource RoundedIconButtonMouseOverExitAnimation}" />
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="IsFocused" Value="true">
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource RoundedIconButtonMouseOverEnterAnimation}" />
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource RoundedIconButtonMouseOverExitAnimation}" />
							</Trigger.ExitActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


</ResourceDictionary>